const { Client, GatewayIntentBits, EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, PermissionsBitField, StringSelectMenuBuilder, ChannelType } = require('discord.js');
const fs = require('fs');
const path = require('path');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.DirectMessages
    ]
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const APPLICATION_COOLDOWN = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const configPath = path.join(__dirname, 'config.json');
const statsPath = path.join(__dirname, 'stats.json');
const cooldownsPath = path.join(__dirname, 'cooldowns.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
let config = { applicationChannelId: null, acceptedRoleId: null };
let stats = { acceptedApplications: {} };
let cooldowns = { applications: {} };

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function loadConfig() {
    try {
        const data = fs.readFileSync(configPath, 'utf8');
        config = JSON.parse(data);
        console.log('Configuration loaded successfully');
    } catch (error) {
        console.error('Error loading configuration:', error);
    }
}

function saveConfig() {
    try {
        fs.writeFileSync(configPath, JSON.stringify(config, null, 4));
        console.log('Configuration saved successfully');
    } catch (error) {
        console.error('Error saving configuration:', error);
    }
}

function loadStats() {
    try {
        const data = fs.readFileSync(statsPath, 'utf8');
        stats = JSON.parse(data);
        console.log('Statistics loaded successfully');
    } catch (error) {
        console.error('Error loading statistics:', error);
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        saveStats();
    }
}

function saveStats() {
    try {
        fs.writeFileSync(statsPath, JSON.stringify(stats, null, 4));
        console.log('Statistics saved successfully');
    } catch (error) {
        console.error('Error saving statistics:', error);
    }
}

function loadCooldowns() {
    try {
        const data = fs.readFileSync(cooldownsPath, 'utf8');
        cooldowns = JSON.parse(data);
        console.log('Cooldowns loaded successfully');
    } catch (error) {
        console.error('Error loading cooldowns:', error);
        saveCooldowns();
    }
}

function saveCooldowns() {
    try {
        fs.writeFileSync(cooldownsPath, JSON.stringify(cooldowns, null, 4));
        console.log('Cooldowns saved successfully');
    } catch (error) {
        console.error('Error saving cooldowns:', error);
    }
}

function incrementAcceptedApplications(userId) {
    if (!stats.acceptedApplications[userId]) {
        stats.acceptedApplications[userId] = 0;
    }
    stats.acceptedApplications[userId]++;
    saveStats();
}

function formatTimeLeft(ms) {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}–º ${seconds}—Å`;
}

function checkCooldown(userId) {
    const lastApplication = cooldowns.applications[userId];
    if (!lastApplication) return null;

    const now = Date.now();
    const timePassed = now - lastApplication;
    if (timePassed < APPLICATION_COOLDOWN) {
        return APPLICATION_COOLDOWN - timePassed;
    }
    return null;
}

function setCooldown(userId) {
    cooldowns.applications[userId] = Date.now();
    saveCooldowns();
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadConfig();
loadStats();
loadCooldowns();

client.once('ready', async () => {
    console.log('Bot is ready!');
    
    const commands = [
        {
            name: '–∑–∞—è–≤–∫–∞',
            description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏'
        },
        {
            name: '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–∫–∞–Ω–∞–ª–∑–∞—è–≤–æ–∫',
            description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫',
            options: [
                {
                    name: '–∫–∞–Ω–∞–ª',
                    description: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª',
                    type: 7,
                    required: true
                }
            ]
        },
        {
            name: '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Ä–æ–ª—å–ø—Ä–∏–Ω—è—Ç–∏—è',
            description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            options: [
                {
                    name: '—Ä–æ–ª—å',
                    description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å',
                    type: 8,
                    required: true
                }
            ]
        },
        {
            name: '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫'
        },
        {
            name: '—Å–∫–ª–∞–¥',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º'
        }
    ];

    try {
        await client.application.commands.set(commands);
        console.log('Slash commands registered successfully!');
    } catch (error) {
        console.error('Error registering slash commands:', error);
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const activeStatistics = new Map();

// –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const storageMessages = new Map();

client.on('interactionCreate', async interaction => {
    try {
        if (interaction.isCommand()) {
            switch (interaction.commandName) {
                case '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                    const sortedStats = Object.entries(stats.acceptedApplications)
                        .sort(([, a], [, b]) => b - a);
                    
                    if (sortedStats.length === 0) {
                        await interaction.reply({
                            content: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –∑–∞—è–≤–∫–∏.',
                            ephemeral: true
                        });
                        return;
                    }

                    const pages = [];
                    for (let i = 0; i < sortedStats.length; i += 10) {
                        const pageStats = sortedStats.slice(i, i + 10);
                        const embed = new EmbedBuilder()
                            .setTitle('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫')
                            .setColor('#2b2d31')
                            .setDescription(
                                await Promise.all(pageStats.map(async ([userId, count], index) => {
                                    try {
                                        const user = await client.users.fetch(userId);
                                        return `${i + index + 1}. ${user.tag}: \`${count}\` –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫`;
                                    } catch {
                                        return `${i + index + 1}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \`${count}\` –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫`;
                                    }
                                })).then(lines => lines.join('\n'))
                            )
                            .setFooter({ text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(i / 10) + 1}/${Math.ceil(sortedStats.length / 10)}` });
                        pages.push(embed);
                    }

                    const uniqueId = Date.now().toString();
                    activeStatistics.set(uniqueId, { pages, currentPage: 0 });

                    const navigationRow = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`prev_${uniqueId}`)
                                .setLabel('‚óÄ')
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(true),
                            new ButtonBuilder()
                                .setCustomId(`next_${uniqueId}`)
                                .setLabel('‚ñ∂')
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(pages.length <= 1)
                        );

                    await interaction.reply({
                        embeds: [pages[0]],
                        components: [navigationRow]
                    });
                    break;

                case '–∑–∞—è–≤–∫–∞':
                    const embed = new EmbedBuilder()
                        .setTitle('–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏')
                        .setDescription('–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Ä–µ–∫—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π')
                        .setImage('https://media.discordapp.net/attachments/1355673237320892436/1355682076380237894/zXxz.png')
                        .setColor('#2f3136');

                    const button = new ButtonBuilder()
                        .setCustomId('submit_application')
                        .setLabel('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
                        .setStyle(ButtonStyle.Primary);

                    const row = new ActionRowBuilder().addComponents(button);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
                    await interaction.channel.send({ embeds: [embed], components: [row] });
                    // –°–∫—Ä—ã—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await interaction.reply({ content: '–§–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', ephemeral: true });
                    break;

                case '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–∫–∞–Ω–∞–ª–∑–∞—è–≤–æ–∫':
                    if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                        return await interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral: true });
                    }
                    config.applicationChannelId = interaction.options.getChannel('–∫–∞–Ω–∞–ª').id;
                    saveConfig();
                    await interaction.reply({ content: '–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', ephemeral: true });
                    break;

                case '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Ä–æ–ª—å–ø—Ä–∏–Ω—è—Ç–∏—è':
                    if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                        return await interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral: true });
                    }
                    config.acceptedRoleId = interaction.options.getRole('—Ä–æ–ª—å').id;
                    saveConfig();
                    await interaction.reply({ content: '–†–æ–ª—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', ephemeral: true });
                    break;

                case '—Å–∫–ª–∞–¥':
                    const storageEmbed = new EmbedBuilder()
                        .setTitle('üì¶ –°–∫–ª–∞–¥')
                        .setColor('#2b2d31')
                        .addFields(
                            { name: 'üõ†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã', value: '0', inline: true },
                            { name: 'üí∞ –î–µ–Ω—å–≥–∏', value: '0', inline: true },
                            { name: '\u200B', value: '**üî´ –û—Ä—É–∂–∏–µ:**', inline: false },
                            { name: 'üî¥ Sniper Rifle Corp', value: '0', inline: true },
                            { name: 'üî¥ Heavy Sniper Corp', value: '0', inline: true },
                            { name: 'üî¥ Heavy Sniper Printed', value: '0', inline: true },
                            { name: 'Assault Rifle Printed', value: '0', inline: true },
                            { name: 'Bullpup Rifle Corp', value: '0', inline: true },
                            { name: 'Pumpshotgun Corp', value: '0', inline: true },
                            { name: 'Revolver Printed', value: '0', inline: true },
                            { name: 'Carbine Rifle Corp', value: '0', inline: true },
                            { name: 'Carbine Rifle Printed', value: '0', inline: true },
                            { name: 'Special Carbine Corp', value: '0', inline: true }
                        );

                    const selectMenu = new StringSelectMenuBuilder()
                        .setCustomId('storage_select')
                        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
                        .addOptions([
                            {
                                label: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
                                value: 'materials',
                                emoji: 'üõ†Ô∏è'
                            },
                            {
                                label: '–î–µ–Ω—å–≥–∏',
                                value: 'money',
                                emoji: 'üí∞'
                            },
                            {
                                label: 'Sniper Rifle Corp',
                                value: 'sniper_rifle_corp',
                                emoji: 'üî¥'
                            },
                            {
                                label: 'Heavy Sniper Corp',
                                value: 'heavy_sniper_corp',
                                emoji: 'üî¥'
                            },
                            {
                                label: 'Heavy Sniper Printed',
                                value: 'heavy_sniper_printed',
                                emoji: 'üî¥'
                            },
                            {
                                label: 'Assault Rifle Printed',
                                value: 'assault_rifle_printed',
                                emoji: 'üî´'
                            },
                            {
                                label: 'Bullpup Rifle Corp',
                                value: 'bullpup_rifle_corp',
                                emoji: 'üî´'
                            },
                            {
                                label: 'Pumpshotgun Corp',
                                value: 'pumpshotgun_corp',
                                emoji: 'üî´'
                            },
                            {
                                label: 'Revolver Printed',
                                value: 'revolver_printed',
                                emoji: 'üî´'
                            },
                            {
                                label: 'Carbine Rifle Corp',
                                value: 'carbine_rifle_corp',
                                emoji: 'üî´'
                            },
                            {
                                label: 'Carbine Rifle Printed',
                                value: 'carbine_rifle_printed',
                                emoji: 'üî´'
                            },
                            {
                                label: 'Special Carbine Corp',
                                value: 'special_carbine_corp',
                                emoji: 'üî´'
                            }
                        ]);

                    const selectRow = new ActionRowBuilder().addComponents(selectMenu);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–∞–Ω–∞–ª
                    const message = await interaction.channel.send({
                        embeds: [storageEmbed],
                        components: [selectRow]
                    });

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à–µ
                    storageMessages.set(message.id, message);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã
                    await interaction.reply({
                        content: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–æ!',
                        ephemeral: true
                    });
                    break;
            }
        }

        if (interaction.isButton()) {
            if (interaction.customId === 'submit_application') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                const timeLeft = checkCooldown(interaction.user.id);
                if (timeLeft) {
                    await interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ')
                                .setDescription(`–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ \`${formatTimeLeft(timeLeft)}\``)
                                .setColor('#f04747')
                        ],
                        ephemeral: true
                    });
                    return;
                }

                const modal = new ModalBuilder()
                    .setCustomId('application_modal')
                    .setTitle('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ');

                const nicknameInput = new TextInputBuilder()
                    .setCustomId('nickname')
                    .setLabel('–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –∏ —Å—Ç–∞—Ç–∏–∫')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const ageInput = new TextInputBuilder()
                    .setCustomId('age')
                    .setLabel('–í–æ–∑—Ä–∞—Å—Ç')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const aboutInput = new TextInputBuilder()
                    .setCustomId('about')
                    .setLabel('–û —Å–µ–±–µ')
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(true);

                const activityInput = new TextInputBuilder()
                    .setCustomId('activity')
                    .setLabel('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const modalRows = [
                    new ActionRowBuilder().addComponents(nicknameInput),
                    new ActionRowBuilder().addComponents(ageInput),
                    new ActionRowBuilder().addComponents(aboutInput),
                    new ActionRowBuilder().addComponents(activityInput)
                ];

                modal.addComponents(...modalRows);
                await interaction.showModal(modal);
            } else if (interaction.customId.startsWith('prev_') || interaction.customId.startsWith('next_')) {
                const [action, id] = interaction.customId.split('_');
                const stats = activeStatistics.get(id);
                
                if (!stats) {
                    await interaction.reply({
                        content: '–≠—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` —Å–Ω–æ–≤–∞.',
                        ephemeral: true
                    });
                    return;
                }

                if (action === 'next') {
                    stats.currentPage = Math.min(stats.currentPage + 1, stats.pages.length - 1);
                } else {
                    stats.currentPage = Math.max(stats.currentPage - 1, 0);
                }

                const navigationRow = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`prev_${id}`)
                            .setLabel('‚óÄ')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(stats.currentPage === 0),
                        new ButtonBuilder()
                            .setCustomId(`next_${id}`)
                            .setLabel('‚ñ∂')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(stats.currentPage === stats.pages.length - 1)
                    );

                await interaction.update({
                    embeds: [stats.pages[stats.currentPage]],
                    components: [navigationRow]
                });
            } else if (interaction.customId.startsWith('accept_') || interaction.customId.startsWith('reject_')) {
                const userId = interaction.customId.split('_')[1];
                const user = await client.users.fetch(userId);
                const isAccept = interaction.customId.startsWith('accept_');

                try {
                    if (isAccept) {
                        if (!config.acceptedRoleId) {
                            await interaction.reply({ content: '–†–æ–ª—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', ephemeral: true });
                            return;
                        }

                        const member = await interaction.guild.members.fetch(userId);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –æ—Ç –±—ç–∫—Ç–∏–∫–æ–≤
                        const nickname = interaction.message.embeds[0].fields.find(f => f.name.includes('–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫'))?.value
                            .replace(/```/g, '').trim();
                        
                        if (nickname) {
                            try {
                                await member.setNickname(nickname);
                            } catch (error) {
                                console.error('Error setting nickname:', error);
                            }
                        }

                        await member.roles.add(config.acceptedRoleId);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
                        const originalEmbed = interaction.message.embeds[0];
                        const updatedEmbed = EmbedBuilder.from(originalEmbed)
                            .setColor('#43b581')  // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫
                            .addFields({ 
                                name: '\u200b', 
                                value: `–ü—Ä–∏–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º \`${interaction.user.tag}\``, 
                                inline: false 
                            });
                        
                        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
                        const disabledRow = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId('accept_disabled')
                                    .setLabel('–ü—Ä–∏–Ω—è—Ç–æ')
                                    .setStyle(ButtonStyle.Success)
                                    .setDisabled(true)
                            );

                        await interaction.message.edit({ embeds: [updatedEmbed], components: [disabledRow] });
                        await user.send({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle('üí† –ó–ê–Ø–í–ö–ê –í –§–ê–ú–£')
                                    .setDescription('```diff\n+ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n```')
                                    .setColor('#43b581')
                            ]
                        });
                        incrementAcceptedApplications(interaction.user.id);
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–∞–∑–µ
                        const originalEmbed = interaction.message.embeds[0];
                        const updatedEmbed = EmbedBuilder.from(originalEmbed)
                            .setColor('#f04747')  // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                            .addFields({ 
                                name: '\u200B', 
                                value: `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º \`${interaction.user.tag}\``, 
                                inline: false 
                            });
                        
                        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
                        const disabledRow = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId('reject_disabled')
                                    .setLabel('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
                                    .setStyle(ButtonStyle.Danger)
                                    .setDisabled(true)
                            );

                        await interaction.message.edit({ embeds: [updatedEmbed], components: [disabledRow] });
                        await user.send({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle('üí† –ó–ê–Ø–í–ö–ê –í –§–ê–ú–£')
                                    .setDescription('```diff\n- –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n```\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ.')
                                    .setColor('#f04747')
                            ]
                        });
                    }

                    await interaction.reply({ content: '–†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –ø—Ä–∏–Ω—è—Ç–æ!', ephemeral: true });
                } catch (error) {
                    console.error('Error handling application decision:', error);
                    await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è!', ephemeral: true });
                }
            }
        }

        if (interaction.isStringSelectMenu()) {
            if (interaction.customId === 'storage_select') {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à–µ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
                storageMessages.set(interaction.message.id, interaction.message);

                const type = interaction.values[0];
                let typeName;
                let emoji;
                let fieldIndex;

                switch(type) {
                    case 'materials':
                        typeName = '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã';
                        emoji = 'üõ†Ô∏è';
                        fieldIndex = 0;
                        break;
                    case 'money':
                        typeName = '–î–µ–Ω—å–≥–∏';
                        emoji = 'üí∞';
                        fieldIndex = 1;
                        break;
                    case 'assault_rifle_printed':
                        typeName = 'Assault Rifle Printed';
                        emoji = 'üî´';
                        fieldIndex = 3;
                        break;
                    case 'bullpup_rifle_corp':
                        typeName = 'Bullpup Rifle Corp';
                        emoji = 'üî´';
                        fieldIndex = 4;
                        break;
                    case 'carbine_rifle_corp':
                        typeName = 'Carbine Rifle Corp';
                        emoji = 'üî´';
                        fieldIndex = 5;
                        break;
                    case 'sniper_rifle_corp':
                        typeName = 'üî¥ Sniper Rifle Corp';
                        emoji = 'üî¥';
                        fieldIndex = 6;
                        break;
                    case 'heavy_sniper_corp':
                        typeName = 'üî¥ Heavy Sniper Corp';
                        emoji = 'üî¥';
                        fieldIndex = 7;
                        break;
                    case 'heavy_sniper_printed':
                        typeName = 'üî¥ Heavy Sniper Printed';
                        emoji = 'üî¥';
                        fieldIndex = 8;
                        break;
                    case 'pumpshotgun_corp':
                        typeName = 'Pumpshotgun Corp';
                        emoji = 'üî´';
                        fieldIndex = 9;
                        break;
                    case 'revolver_printed':
                        typeName = 'Revolver Printed';
                        emoji = 'üî´';
                        fieldIndex = 10;
                        break;
                    case 'carbine_rifle_printed':
                        typeName = 'Carbine Rifle Printed';
                        emoji = 'üî´';
                        fieldIndex = 11;
                        break;
                    case 'special_carbine_corp':
                        typeName = 'Special Carbine Corp';
                        emoji = 'üî´';
                        fieldIndex = 12;
                        break;
                }

                console.log('Message ID:', interaction.message.id);

                const modal = new ModalBuilder()
                    .setCustomId(`storage_modal_${type}_${interaction.message.id}`)
                    .setTitle(`${emoji} ${typeName}`);

                const beforeInput = new TextInputBuilder()
                    .setCustomId('before')
                    .setLabel('–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const afterInput = new TextInputBuilder()
                    .setCustomId('after')
                    .setLabel('–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–ª–æ')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const descriptionInput = new TextInputBuilder()
                    .setCustomId('description')
                    .setLabel('–û–ø–∏—Å–∞–Ω–∏–µ')
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(true);

                const modalRows = [
                    new ActionRowBuilder().addComponents(beforeInput),
                    new ActionRowBuilder().addComponents(afterInput),
                    new ActionRowBuilder().addComponents(descriptionInput)
                ];

                modal.addComponents(...modalRows);
                await interaction.showModal(modal);
            }
        }

        if (interaction.isModalSubmit() && interaction.customId.startsWith('storage_modal_')) {
            // –ü–æ–ª—É—á–∞–µ–º messageId –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ customId
            const parts = interaction.customId.split('_');
            const messageId = parts[parts.length - 1];
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø, –æ–±—ä–µ–¥–∏–Ω—è—è –≤—Å–µ —á–∞—Å—Ç–∏ –º–µ–∂–¥—É storage_modal_ –∏ messageId
            const type = parts.slice(2, -1).join('_');

            console.log('Modal submit - Message ID:', messageId, 'Type:', type);

            let typeName;
            let emoji;
            let fieldIndex;

            switch(type) {
                case 'materials':
                    typeName = '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã';
                    emoji = 'üõ†Ô∏è';
                    fieldIndex = 0;
                    break;
                case 'money':
                    typeName = '–î–µ–Ω—å–≥–∏';
                    emoji = 'üí∞';
                    fieldIndex = 1;
                    break;
                case 'assault_rifle_printed':
                    typeName = 'Assault Rifle Printed';
                    emoji = 'üî´';
                    fieldIndex = 3;
                    break;
                case 'bullpup_rifle_corp':
                    typeName = 'Bullpup Rifle Corp';
                    emoji = 'üî´';
                    fieldIndex = 4;
                    break;
                case 'carbine_rifle_corp':
                    typeName = 'Carbine Rifle Corp';
                    emoji = 'üî´';
                    fieldIndex = 5;
                    break;
                case 'sniper_rifle_corp':
                    typeName = 'üî¥ Sniper Rifle Corp';
                    emoji = 'üî¥';
                    fieldIndex = 6;
                    break;
                case 'heavy_sniper_corp':
                    typeName = 'üî¥ Heavy Sniper Corp';
                    emoji = 'üî¥';
                    fieldIndex = 7;
                    break;
                case 'heavy_sniper_printed':
                    typeName = 'üî¥ Heavy Sniper Printed';
                    emoji = 'üî¥';
                    fieldIndex = 8;
                    break;
                case 'pumpshotgun_corp':
                    typeName = 'Pumpshotgun Corp';
                    emoji = 'üî´';
                    fieldIndex = 9;
                    break;
                case 'revolver_printed':
                    typeName = 'Revolver Printed';
                    emoji = 'üî´';
                    fieldIndex = 10;
                    break;
                case 'carbine_rifle_printed':
                    typeName = 'Carbine Rifle Printed';
                    emoji = 'üî´';
                    fieldIndex = 11;
                    break;
                case 'special_carbine_corp':
                    typeName = 'Special Carbine Corp';
                    emoji = 'üî´';
                    fieldIndex = 12;
                    break;
            }

            const before = interaction.fields.getTextInputValue('before');
            const after = interaction.fields.getTextInputValue('after');
            const description = interaction.fields.getTextInputValue('description');

            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞
                const message = await interaction.channel.messages.fetch(messageId);
                if (!message) {
                    await interaction.reply({
                        content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ.',
                        ephemeral: true
                    });
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–º–±–µ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–≥–æ
                const newEmbed = new EmbedBuilder()
                    .setTitle(message.embeds[0].title)
                    .setColor(message.embeds[0].color);

                // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —ç–º–±–µ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤
                const fields = message.embeds[0].fields.map(field => ({
                    name: field.name,
                    value: field.value,
                    inline: field.inline,
                    nameColor: ['Heavy Sniper Printed', 'Heavy Sniper Corp', 'Sniper Rifle Corp'].includes(field.name) ? '#ff0000' : undefined
                }));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
                fields[fieldIndex].value = after;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ –Ω–æ–≤—ã–π —ç–º–±–µ–¥
                newEmbed.addFields(fields);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.edit({
                    embeds: [newEmbed]
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –≤–µ—Ç–∫—É
                const threadName = '–õ–æ–≥–∏';
                let thread = message.thread;
                
                // –ï—Å–ª–∏ –≤–µ—Ç–∫–∏ –Ω–µ—Ç —É —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –µ—ë
                if (!thread) {
                    thread = await message.startThread({
                        name: threadName,
                        type: ChannelType.PublicThread
                    });
                }

                const logEmbed = new EmbedBuilder()
                    .setTitle(`${emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–∫–ª–∞–¥–µ: ${typeName}`)
                    .setColor('#2b2d31')
                    .addFields(
                        { name: '–ë—ã–ª–æ', value: before, inline: true },
                        { name: '–°—Ç–∞–ª–æ', value: after, inline: true },
                        { name: '–û–ø–∏—Å–∞–Ω–∏–µ', value: description },
                        { name: '–ê–≤—Ç–æ—Ä', value: `<@${interaction.user.id}>` }
                    )
                    .setTimestamp();

                await thread.send({
                    embeds: [logEmbed]
                });

                await interaction.reply({
                    content: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
                    ephemeral: true
                });
            } catch (error) {
                console.error('Error updating storage:', error);
                await interaction.reply({
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞.',
                    ephemeral: true
                });
            }
        }

        // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
    } catch (error) {
        console.error('Error handling interaction:', error);
        if (interaction.deferred || interaction.replied) {
            await interaction.followUp({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', ephemeral: true });
        } else {
            await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', ephemeral: true });
        }
    }
});

client.login('token here');
