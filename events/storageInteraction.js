const { Events, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ChannelType, MessageFlags } = require('discord.js');

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        if (!interaction.isButton() && !interaction.isModalSubmit()) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–∫–ª–∞–¥–∞
        if (interaction.isButton() && (interaction.customId === 'add_item' || interaction.customId === 'remove_item')) {
            const modal = new ModalBuilder()
                .setCustomId(`storage_${interaction.customId}`)
                .setTitle(interaction.customId === 'add_item' ? '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–∫–ª–∞–¥' : '–£–±—Ä–∞—Ç—å —Å–æ —Å–∫–ª–∞–¥–∞');

            // –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            const typeInput = new TextInputBuilder()
                .setCustomId('type')
                .setLabel('–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (1-4)')
                .setPlaceholder('1 - Heavy Sniper Printed, 2 - Heavy Sniper Corp, 3 - Sniper Rifle Corp, 4 - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã')
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            // –ü–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            const amountInput = new TextInputBuilder()
                .setCustomId('amount')
                .setLabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                .setStyle(TextInputStyle.Short)
                .setRequired(true);

            // –ü–æ–ª–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            const descriptionInput = new TextInputBuilder()
                .setCustomId('description')
                .setLabel('–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true);

            const firstRow = new ActionRowBuilder().addComponents(typeInput);
            const secondRow = new ActionRowBuilder().addComponents(amountInput);
            const thirdRow = new ActionRowBuilder().addComponents(descriptionInput);

            modal.addComponents(firstRow, secondRow, thirdRow);
            await interaction.showModal(modal);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        if (interaction.isModalSubmit() && interaction.customId.startsWith('storage_')) {
            const isAdding = interaction.customId === 'storage_add_item';
            const type = interaction.fields.getTextInputValue('type');
            const amount = interaction.fields.getTextInputValue('amount');
            const description = interaction.fields.getTextInputValue('description');

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫–ª–∞–¥–æ–º
            const message = interaction.message;
            const embed = message.embeds[0];

            try {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏
                let typeName, fieldIndex, emoji;
                switch (type) {
                    case '1':
                        typeName = 'Heavy Sniper Printed';
                        fieldIndex = 0;
                        emoji = 'üî´';
                        break;
                    case '2':
                        typeName = 'Heavy Sniper Corp';
                        fieldIndex = 1;
                        emoji = 'üéØ';
                        break;
                    case '3':
                        typeName = 'Sniper Rifle Corp';
                        fieldIndex = 2;
                        emoji = 'üé™';
                        break;
                    case '4':
                        typeName = '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã';
                        fieldIndex = 3;
                        emoji = 'üì¶';
                        break;
                    default:
                        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞');
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                const currentValue = parseInt(embed.fields[fieldIndex].value) || 0;
                const amountNum = parseInt(amount);

                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                const before = currentValue.toString();
                const after = (isAdding ? currentValue + amountNum : currentValue - amountNum).toString();

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–º–±–µ–¥
                const newEmbed = new EmbedBuilder()
                    .setTitle(embed.title)
                    .setColor(embed.color);

                // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è
                embed.fields.forEach((field, index) => {
                    newEmbed.addFields({
                        name: field.name,
                        value: index === fieldIndex ? after : field.value,
                        inline: field.inline
                    });
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.edit({ embeds: [newEmbed] });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –≤–µ—Ç–∫—É
                const thread = message.thread;
                if (thread) {
                    const logEmbed = new EmbedBuilder()
                        .setTitle(`${emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–∫–ª–∞–¥–µ: ${typeName}`)
                        .setColor('#2b2d31')
                        .addFields(
                            { name: '–ë—ã–ª–æ', value: before, inline: true },
                            { name: '–°—Ç–∞–ª–æ', value: after, inline: true },
                            { name: '–û–ø–∏—Å–∞–Ω–∏–µ', value: description },
                            { name: '–ê–≤—Ç–æ—Ä', value: `<@${interaction.user.id}>` }
                        )
                        .setTimestamp();

                    await thread.send({ embeds: [logEmbed] });
                }

                await interaction.reply({
                    content: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
                    ephemeral: true
                });
            } catch (error) {
                console.error('Error updating storage:', error);
                await interaction.reply({
                    content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞.',
                    ephemeral: true
                });
            }
        }
    }
};
